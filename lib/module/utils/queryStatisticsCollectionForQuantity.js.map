{"version":3,"names":["ensureUnit","Native","EventEmitter","queryStatisticsCollectionForQuantity","identifier","options","from","to","unit","updateCallback","actualUnit","toDate","Date","subscribe","Boolean","rawResponse","toISOString","response","queryId","data","map","record","startDate","endDate","onUpdate","update","subscription","addListener","unsubscribe","remove","unsubscribeQuery"],"sources":["queryStatisticsCollectionForQuantity.ts"],"sourcesContent":["import ensureUnit from './ensureUnit'\nimport Native, { EventEmitter } from '../native-types'\n\nimport type { HKQuantityTypeIdentifier, HKStatistics, HKStatisticsOptions, UnitForIdentifier } from '../native-types'\nimport { QueryStatisticsCollectionResponse } from '../types'\n\nasync function queryStatisticsCollectionForQuantity<TIdentifier extends HKQuantityTypeIdentifier, TUnit extends UnitForIdentifier<TIdentifier> = UnitForIdentifier<TIdentifier>>(\n  identifier: TIdentifier,\n  options: readonly HKStatisticsOptions[],\n  from: Date,\n  to?: Date,\n  unit?: TUnit,\n  updateCallback?: (\n    error: string,\n    data: { stats: HKStatistics<TIdentifier, TUnit>, statsCollection: HKStatistics<TIdentifier, TUnit>[] }\n  ) => void\n) {\n  const actualUnit = await ensureUnit(identifier, unit)\n  const toDate = to || new Date()\n  const subscribe = Boolean(updateCallback)\n\n\n  const rawResponse = await Native.queryStatisticsCollectionForQuantity(\n    identifier,\n    actualUnit,\n    from.toISOString(),\n    toDate.toISOString(),\n    options,\n    subscribe\n  )\n\n  const response: QueryStatisticsCollectionResponse<TIdentifier, TUnit, typeof subscribe> = {\n    queryId: rawResponse.queryId,\n    data: rawResponse.data.map((record) => {\n      record.startDate = new Date(record.startDate)\n      record.endDate = new Date(record.endDate)\n      return record as Omit<HKStatistics<TIdentifier, TUnit>, \"startDate\" | \"endDate\"> & { startDate: Date; endDate: Date; }\n    }),\n  }\n\n  const onUpdate = (\n    update: {\n      queryId: string,\n      data: { stats: HKStatistics<TIdentifier, TUnit>, statsCollection: HKStatistics<TIdentifier, TUnit>[] }\n    }\n  ) => {\n    if (update.queryId === response.queryId) {\n      updateCallback?.(\"\", update.data)\n    }\n  }\n\n  if (subscribe) {\n    const subscription = EventEmitter.addListener('onStatsCollectionUpdate', onUpdate)\n    \n    response.unsubscribe = async () => {\n      subscription.remove()\n      return Native.unsubscribeQuery(response.queryId)\n    }\n  }\n\n  return response\n}\n\nexport default queryStatisticsCollectionForQuantity\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,IAAIC,YAAY,QAAQ,iBAAiB;AAKtD,eAAeC,oCAAoCA,CACjDC,UAAuB,EACvBC,OAAuC,EACvCC,IAAU,EACVC,EAAS,EACTC,IAAY,EACZC,cAGS,EACT;EACA,MAAMC,UAAU,GAAG,MAAMV,UAAU,CAACI,UAAU,EAAEI,IAAI,CAAC;EACrD,MAAMG,MAAM,GAAGJ,EAAE,IAAI,IAAIK,IAAI,CAAC,CAAC;EAC/B,MAAMC,SAAS,GAAGC,OAAO,CAACL,cAAc,CAAC;EAGzC,MAAMM,WAAW,GAAG,MAAMd,MAAM,CAACE,oCAAoC,CACnEC,UAAU,EACVM,UAAU,EACVJ,IAAI,CAACU,WAAW,CAAC,CAAC,EAClBL,MAAM,CAACK,WAAW,CAAC,CAAC,EACpBX,OAAO,EACPQ,SACF,CAAC;EAED,MAAMI,QAAiF,GAAG;IACxFC,OAAO,EAAEH,WAAW,CAACG,OAAO;IAC5BC,IAAI,EAAEJ,WAAW,CAACI,IAAI,CAACC,GAAG,CAAEC,MAAM,IAAK;MACrCA,MAAM,CAACC,SAAS,GAAG,IAAIV,IAAI,CAACS,MAAM,CAACC,SAAS,CAAC;MAC7CD,MAAM,CAACE,OAAO,GAAG,IAAIX,IAAI,CAACS,MAAM,CAACE,OAAO,CAAC;MACzC,OAAOF,MAAM;IACf,CAAC;EACH,CAAC;EAED,MAAMG,QAAQ,GACZC,MAGC,IACE;IACH,IAAIA,MAAM,CAACP,OAAO,KAAKD,QAAQ,CAACC,OAAO,EAAE;MACvCT,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAG,EAAE,EAAEgB,MAAM,CAACN,IAAI,CAAC;IACnC;EACF,CAAC;EAED,IAAIN,SAAS,EAAE;IACb,MAAMa,YAAY,GAAGxB,YAAY,CAACyB,WAAW,CAAC,yBAAyB,EAAEH,QAAQ,CAAC;IAElFP,QAAQ,CAACW,WAAW,GAAG,YAAY;MACjCF,YAAY,CAACG,MAAM,CAAC,CAAC;MACrB,OAAO5B,MAAM,CAAC6B,gBAAgB,CAACb,QAAQ,CAACC,OAAO,CAAC;IAClD,CAAC;EACH;EAEA,OAAOD,QAAQ;AACjB;AAEA,eAAed,oCAAoC"}